{
  "extends": [
    "next/core-web-vitals",
    "plugin:react/recommended"
  ],
  "plugins": [
    // "eslint-plugin-react-hooks",
    // "eslint-plugin-jsx-a11y",
    // "eslint-plugin-import",
    // "eslint-plugin-simple-import-sort"
    "prettier",
    "react"
  ],
  "rules": {
    "strict": [
      2,
      "global"
    ], // `[2, "function"]` is default, optionally set `[2, "never"]`
    "init-declarations": 0, // `[2, "always"]` is default | require or disallow initialization in var declarations
    "no-catch-shadow": 0, // `2` is default | disallow catch clause parameters from shadowing variables in the outer scope
    "no-delete-var": 1, // `2` is default | disallow deleting variables
    "no-label-var": 2,
    "no-shadow-restricted-names": 2, //disallow identifiers from shadowing restricted names
    "no-global-assign": 2, // Disallow assignment to native objects or read-only global variables
    "no-shadow": [
      1,
      {
        "builtinGlobals": false,
        "hoist": "all"
      }
    ], // `[2, {"builtinGlobals": false, "hoist": "functions"}]` is default
    "no-undef-init": 2, // `2` is default | disallow initializing variables to undefined
    "no-undef": 1, //disallow the use of undeclared variables unless mentioned in /*global */ comments
    "no-undefined": 0, // disallow the use of undefined as an identifier
    "no-unused-vars": [
      1,
      {
        // "vars": "all",
        // "args": "after-used"
        "vars": "local",
        "args": "after-used",
        "ignoreRestSiblings": true,
        "caughtErrors": "none"
      }
    ], // `[2, {"vars": "all", "args": "after-used"}]` is default, optionally set `[2, {"vars": "all", "args": "after-used", "varsIgnorePattern": "<regex>", "argsIgnorePattern": "<regex>"}]`
    "no-use-before-define": [
      0,
      {
        "functions": false,
        "classes": false
      }
    ], //disallow the use of variables before they are defined
    "comma-dangle": [
      2
    ], //require or disallow trailing commas
    "no-cond-assign": [
      2,
      "except-parens"
    ], //disallow assignment operators in conditional expressions
    "no-console": 0, // `2` is default. Set to `0` when developing with node
    "no-constant-condition": 0, //disallow constant expressions in conditions
    "no-control-regex": 2, //disallow control characters in regular expressions
    "no-debugger": 2, //disallow the use of debugger
    "no-dupe-args": 2, // disallow duplicate arguments in function definitions
    "no-dupe-keys": 2, // disallow duplicate keys in object literals
    "no-duplicate-case": 2, // disallow duplicate case labels
    "no-empty": 2, // disallow empty block statements
    "no-empty-character-class": 2, // disallow empty character classes in regular
    "no-ex-assign": 2, // disallow reassigning exceptions in catch clauses
    "no-extra-boolean-cast": 2, // disallow unnecessary boolean casts
    "no-extra-parens": [
      0,
      "all"
    ], // `[2, "all"]` is default // disallow unnecessary parentheses
    "no-extra-semi": 1, // `2` is default // disallow unnecessary semicolons
    "no-func-assign": 2, // disallow reassigning function declarations
    "no-inner-declarations": [
      0,
      "both"
    ], // `[2, "functions"]` is default // disallow function or var declarations in nested blocks
    "no-invalid-regexp": 2, // disallow invalid regular expression strings in RegExp
    "no-irregular-whitespace": 2, // disallow irregular whitespace outside of strings and
    "no-negated-in-lhs": 2, // disallow negating the left operand in in expressions
    "no-obj-calls": 2, // disallow calling global object properties as functions
    "no-regex-spaces": 2, // disallow multiple spaces in regular expression literals
    "no-sparse-arrays": 2, // disallow sparse arrays
    "no-unexpected-multiline": 2, // disallow confusing multiline expressions
    "no-unreachable": 2, // disallow unreachable code after return, throw, continue, and
    "use-isnan": 2, // require calls to isNaN() when checking for NaN
    "valid-jsdoc": 0, // `2` is default // enforce valid JSDoc comments
    "valid-typeof": 2, // enforce comparing typeof expressions against valid strings
    "accessor-pairs": [
      2,
      {
        "getWithoutSet": false,
        "setWithoutGet": false
      }
    ], // enforce getter and setter pairs in objects
    "block-scoped-var": 2, // enforce the use of variables within the scope they are defined
    "complexity": [
      2,
      { "max": 50 }
    ], // `[2, 2]` is recommended //  enforce a maximum cyclomatic complexity allowed in a program
    "consistent-return": 0, // require return statements to either always or never specify values
    "curly": [
      2,
      "multi-line"
    ], //enforce consistent brace style for all control statements
    "default-case": 2, // require default cases in switch statements
    "dot-location": [
      0,
      "property"
    ], // `[2, "object"]` is recommended enforce consistent newlines before and after dots
    "dot-notation": [
      1,
      {
        "allowKeywords": true,
        "allowPattern": ""
      }
    ], // enforce dot notation whenever possible
    "eqeqeq": 1, // `2` is recommended, optionally set `[2, "smart"]` or `[2, "allow-null"]`
    "guard-for-in": 1, // require for-in loops to include an if statement
    "no-alert": 0, // `2` is recommended // disallow the use of alert, confirm, and prompt
    "no-caller": 2, // disallow the use of arguments.caller or arguments.callee
    "no-div-regex": 2, // disallow division operators explicitly at the beginning of regular expressions
    "no-else-return": 0, // disallow else blocks after return statements in if statements
    "no-empty-function": 1, // disallow empty functions
    "no-empty-pattern": 2, // disallow empty destructuring patterns
    "no-eq-null": 1, // disallow null comparisons without type-checking operators
    "no-eval": 2, // disallow the use of eval()
    "no-extend-native": 2, // `2` is recommended, optionally set `[2, {"exceptions": ["Object"]}]` // disallow extending native types
    "no-extra-bind": 1, // disallow unnecessary calls to .bind()
    "no-extra-label": 1, // disallow unnecessary labels
    "no-fallthrough": 1, // `2` is recommended // disallow fallthrough of case statements
    "no-floating-decimal": 2, // `2` is recommended // disallow leading or trailing decimal points in numeric literals
    "no-implicit-coercion": [
      1,
      {
        "boolean": false,
        "number": true,
        "string": false
      }
    ], // `[2, {"boolean": true, "number": true, "string": true}],` is recommended // disallow shorthand type conversions
    "no-implicit-globals": 2, // disallow var and named function declarations in the global scope
    "no-implied-eval": 2, // disallow the use of eval()-like methods
    "no-invalid-this": 0, // `2` is recommended / disallow this keywords outside of classes or class-like objects
    "no-iterator": 2, // disallow the use of the __iterator__ property
    "no-labels": 2, // disallow labeled statements
    "no-lone-blocks": 2, // disallow unnecessary nested blocks
    "no-loop-func": 2, // disallow function declarations and expressions inside loop statements
    "no-magic-numbers": 0, // disallow magic numbers
    "no-multi-spaces": [
      1,
      {
        "exceptions": {
          "VariableDeclarator": true,
          "ImportDeclaration": true,
          "AssignmentExpression": true,
          "ObjectExpression": true
        }
      }
    ], // `2` is recommended
    "no-multi-str": 2, // disallow multiline strings
    "no-native-reassign": 2, // `2` is recommended, optionally set `[2, {"exceptions": ["Object"]}]` // disallow reassigning native objects
    "no-new": 2, // disallow new operators outside of assignments or comparisons
    "no-new-func": 2, // disallow new operators with the Function object
    "no-new-wrappers": 2, // disallow new operators with the String, Number, and Boolean objects
    "no-octal": 2, // disallow octal literals
    "no-octal-escape": 2, // disallow octal escape sequences in string literals
    "no-param-reassign": 0, // `2` is recommended and actually defaults to `[2, {"props": false}]` // disallow reassigning function parameters
    "no-proto": 2, // disallow the use of the __proto__ property
    "no-redeclare": [
      1,
      { "builtinGlobals": true }
    ], // `2` is recommended and actually defaults to `[2, {"builtinGlobals": false}]` // disallow var redeclaration
    "no-return-assign": [
      1,
      "except-parens"
    ], // disallow assignment operators in return statements
    "no-script-url": 2, // disallow javascript: urls
    "no-self-compare": 2, // disallow comparisons where both sides are exactly the same
    "no-sequences": 2, //  disallow comma operators
    "no-throw-literal": 2, // disallow throwing literals as exceptions
    "no-unused-expressions": 1, // `2` is recommended and actually defaults to `[2, {"allowShortCircuit": false, "allowTernary": false}]`
    "no-unused-labels": 2, // disallow unused labels
    "no-useless-call": 1, // `2` is recommended // disallow unnecessary calls to .call() and .apply()
    "no-useless-concat": 2, // disallow unnecessary concatenation of literals or template literals
    "no-useless-escape": 2, // disallow unnecessary escape characters
    "no-void": 2, // disallow void operators
    "no-warning-comments": [
      1,
      {
        "terms": [
          "todo",
          "fixme"
        ],
        "location": "start"
      }
    ], // `[0, { "terms": ["todo", "fixme", "xxx"], "location": "start" }]` is recommended // disallow specified warning terms in comments
    "no-with": 2, // disallow with statements
    "radix": 1, // `2` is recommended // enforce the consistent use of the radix argument when using parseInt()
    "vars-on-top": 0, // `2` is recommended | require var declarations be placed at the top of their containing scope // require var declarations be placed at the top of their containing scope
    "wrap-iife": [
      2,
      "inside"
    ], // `[2, "outside"]` is recommended // require parentheses around immediate function invocations
    "yoda": [
      2,
      "never"
    ], // `[2, "never"]` is recommended, optionally set `[2, "never", {"exceptRange": true, "onlyEquality": false}] // require or disallow â€œYodaâ€ conditions
    //
    //
    //
    //
    //
    //
    // ─── STYLISTIC ISSUES ────────────────────────────────────────────
    //
    "array-bracket-spacing": [
      1,
      "always"
    ], // optionally set `[2, "never", {"singleValue": true, "objectsInArrays": true, "arraysInArrays": true}]`
    "block-spacing": [
      1,
      "always"
    ], // enforce consistent spacing inside single-line blocks
    "brace-style": [
      2,
      "stroustrup",
      { "allowSingleLine": false }
    ], // enforce consistent brace style for blocks
    "camelcase": [
      1,
      {
        "properties": "always",
        "allow": ["^UNSAFE_"]
      }
    ], // enforce camelcase naming convention
    "comma-spacing": [
      1,
      {
        "before": false,
        "after": true
      }
    ], // enforce consistent spacing before and after commas
    "comma-style": [
      1,
      "last"
    ], // optionally set `[2, "first", {"exceptions": {"ArrayExpression": true, "ObjectExpression": true}}]`
    "computed-property-spacing": [
      1,
      "never"
    ], // enforce consistent spacing inside computed property brackets
    "consistent-this": [
      1,
      "self",
      "vm"
    ], // enforce consistent naming when capturing the current execution context
    "eol-last": 1, // enforce at least one newline at the end of files
    "func-names": 0, // enforce named function expressions
    "func-style": 0, // optionally set `[2, "expression"]` enforce the consistent use of either function declarations or expressions
    "id-length": 0, // optionally set `[2, {"min": 3, "max": 10, "properties": "never", "exceptions": ["x"]}]` // enforce minimum and maximum identifier lengths
    "id-match": 0, // optionally set `[2, "^[a-z]+([A-Z][a-z]+)*$", {"properties": false}]` require identifiers to match a specified regular expression
    "indent": [
      1,
      2,
      {
        "SwitchCase": 1,
        "VariableDeclarator": 2,
        "ignoredNodes": ["TemplateLiteral"]
      }
    ], // optionally set `[2, 2, {"SwitchCase": 1, "VariableDeclarator": {"var": 2, "let": 2, "const": 3}}]`  enforce consistent indentation
    "jsx-quotes": [
      2,
      "prefer-double"
    ], // enforce the consistent use of either double or single quotes in JSX attributes
    "key-spacing": [
      1,
      {
        "beforeColon": false,
        "afterColon": true,
        "mode": "minimum"
      }
    ], // optionally set `[2, {"beforeColon": false, "afterColon": true, "mode": "strict", "align": "colon"}]` enforce consistent spacing between keys and values in object literal properties
    "keyword-spacing": [
      1,
      {
        "before": true,
        "after": true
      }
    ], // enforce consistent spacing before and after keywords
    "linebreak-style": [
      0
    ], // optionally set `[1, "unix"]` // enforce consistent linebreak style
    "lines-around-comment": 0, // optionally set `[2, {"beforeBlockComment": true, "beforeLineComment": true, "allowBlockStart": true}]` // require empty lines around comments
    "max-depth": [
      1,
      { "max": 10 }
    ], // `[2, 4]` is default // enforce a maximum depth that blocks can be nested
    "max-len": 0, // `[2, 80, 4]` is default, optionally set `[2, 80, 4, {"ignoreComments": true, "ignoreUrls": true}]` // enforce a maximum line length
    "max-nested-callbacks": [
      1,
      10
    ], // enforce a maximum depth that callbacks can be nested
    "max-params": [
      1,
      10
    ], // no default, optionally set `[2, 3]` // enforce a maximum number of parameters in function definitions
    "max-statements": [
      0,
      { "max": 20 },
      { "ignoreTopLevelFunctions": true }
    ], // enforce a maximum number of statements allowed in function blocks
    "max-statements-per-line": 2, // enforce a maximum number of statements allowed per line
    "new-cap": [
      1,
      {
        "newIsCap": true,
        "capIsNew": false
      }
    ], // optionally set `[2, {"capIsNewExceptions": ["Person"]}]` // require constructor function names to begin with a capital letter
    "new-parens": 1, // require parentheses when invoking a constructor with no arguments
    "newline-after-var": [
      0,
      "always"
    ], // require or disallow an empty line after var declarations
    "newline-before-return": 0, // require an empty line before return statements
    "newline-per-chained-call": [
      1,
      { "ignoreChainWithDepth": 2 }
    ], // require a newline after each call in a method chain
    "object-curly-newline": [
      1, {
        "ObjectExpression": {
          "multiline": true,
          "minProperties": 2
        },
        "ObjectPattern": {
          "multiline": true,
          "minProperties": 3
        },
        "ImportDeclaration": "never",
        "ExportDeclaration": {
          "multiline": true,
          "minProperties": 3
        }
      }
    ],
    "no-array-constructor": 1, // disallow Array constructors
    "no-bitwise": 1, // `2` is default // disallow bitwise operators
    "no-continue": 1, // disallow continue statements
    "no-inline-comments": 0, // disallow inline comments after code
    "no-lonely-if": 1, // disallow if statements as the only statement in else blocks
    "no-mixed-spaces-and-tabs": 1, // optionally set `[2, "smart-tabs"]` // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": [
      1,
      { "max": 3 }
    ], // disallow multiple empty lines
    "no-negated-condition": 1, // // disallow negated conditions
    "no-nested-ternary": 0, // // disallow nested ternary expressions
    "no-new-object": 1, // // disallow Object constructors
    "no-plusplus": 0, // `2` is default // // disallow the unary operators ++ and --
    "no-restricted-syntax": 0, // optionally set `[2, "FunctionExpression", "WithStatement"]` // // disallow specified syntax
    "no-spaced-func": 1, // // disallow spacing between function identifiers and their applications
    "no-ternary": 0, // // disallow ternary operators
    "no-trailing-spaces": [
      1,
      { "skipBlankLines": false }
    ], // // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 0, // // disallow dangling underscores in identifiers
    "no-unneeded-ternary": [
      1,
      { "defaultAssignment": true }
    ], // // disallow ternary operators when simpler alternatives exist
    "no-whitespace-before-property": 1, // // disallow whitespace before properties
    "object-curly-spacing": [
      1,
      "always"
    ], // optionally set `[2, "always", {"objectsInObjects": false, "arraysInObjects": false}]` // // enforce consistent spacing inside braces
    "object-property-newline": 2, // // enforce placing object properties on separate lines
    "one-var": [
      1,
      {
        "uninitialized": "always",
        "initialized": "never"
      }
    ], // optionally set `[2, {"var": "always", "let": "never", "const": "never"}]` // // enforce variables to be declared either together or separately in functions
    "one-var-declaration-per-line": 2, // // require or disallow newlines around var declarations
    "operator-assignment": 0, // optionally set `[2, "always"]` // // require or disallow assignment operator shorthand where possible
    "operator-linebreak": [
      1,
      "after"
    ], // optionally set `[2, "before", {"overrides": {"?": "after"}}]` // // enforce consistent linebreak style for operators
    "padded-blocks": [
      0,
      "never"
    ], //require or disallow padding within blocks // // require or disallow padding within blocks
    "quote-props": [
      1,
      "as-needed",
      {
        "keywords": false,
        "unnecessary": false,
        "numbers": true
      }
    ], // // require quotes around object literal property names
    "quotes": [
      2,
      "double",
      "avoid-escape"
    ], // // enforce the consistent use of either backticks, double, or single quotes
    "require-jsdoc": 0, // // require JSDoc comments
    "semi": [
      2,
      "always"
    ], // // require or disallow semicolons instead of ASI
    "semi-spacing": [
      1,
      {
        "before": false,
        "after": true
      }
    ], // // enforce consistent spacing before and after semicolons
    "sort-vars": 0, // optaionlly set `[2, {"ignoreCase": true}]` // // require variables within the same declaration block to be sorted
    "space-before-blocks": [
      1,
      "always"
    ], // optionally set `[2, {"functions": "never", "keywords": "always"}]` // // enforce consistent spacing before blocks
    "space-before-function-paren": [
      1,
      "never"
    ], // optionally set `[2, {"anonymous": "always", "named": "never"}]` // // enforce consistent spacing before function definition opening parenthesis
    "space-in-parens": [
      1,
      "never"
    ], // optionally set `[2, "always", {"exceptions": ["empty"]}]` // // enforce consistent spacing inside parentheses
    "space-infix-ops": [
      1,
      { "int32Hint": false }
    ], // // require spacing around operators
    "space-unary-ops": [
      1,
      {
        "words": true,
        "nonwords": false
      }
    ], // // enforce consistent spacing before or after unary operators
    "spaced-comment": [
      0,
      "always",
      {
        "exceptions": [
          "/"
        ]
      }
    ], // optionally set `[2, "always", {"exceptions": ["-", "+"], "markers": ["/"]}]` // // enforce consistent spacing after the // or /* in a comment
    "wrap-regex": 1, // // require parenthesis around regex literals
    //
    //
    //
    //
    //
    //
    // ─── ECMASCRIPT 6 ────────────────────────────────────────────────
    //
    "arrow-body-style": 0, // require braces around arrow function bodies
    "arrow-parens": 0, // require parentheses around arrow function arguments
    "arrow-spacing": 2, // enforce consistent spacing before and after the arrow in arrow functions
    "constructor-super": 1, // require super() calls in constructors
    // "generator-star-spacing": [
    //   1,
    //   {
    //     "before": true,
    //     "after": false
    //   }
    // ], // enforce consistent spacing around * operators in generator functions
    "no-class-assign": 1, // disallow reassigning class members
    "no-confusing-arrow": [
      1,
      { "allowParens": true }
    ], // disallow arrow functions where they could be confused with comparisons
    "no-const-assign": 2, // disallow reassigning const variables
    "no-dupe-class-members": 2, // disallow duplicate class members
    "no-duplicate-imports": 1, // disallow duplicate module imports
    "no-new-symbol": 2, // disallow new operators with the Symbol object
    "no-restricted-imports": 2, // disallow specified modules when loaded by import
    "no-this-before-super": 2, // disallow this/super before calling super() in constructors
    "no-useless-computed-key": 2, // disallow unnecessary computed property keys in object literals
    "no-useless-constructor": 0, // disallow unnecessary constructors
    "no-var": 2, // require let or const instead of var
    "object-shorthand": 2, // require or disallow method and property shorthand syntax for object literals
    "prefer-arrow-callback": 2, // require arrow functions as callbacks
    "prefer-const": 2, // require const declarations for variables that are never reassigned after declared
    "prefer-reflect": 0, // require Reflect methods where applicable
    "prefer-rest-params": 1, // require rest parameters instead of arguments
    "prefer-spread": 2, // require spread operators instead of .apply()
    "prefer-template": 2, // require template literals instead of string concatenation
    "require-yield": 1, // require generator functions to contain yield
    "sort-imports": 0, // enforce sorted import declarations within modules
    "template-curly-spacing": 2, // require or disallow spacing around embedded expressions of template strings
    "yield-star-spacing": [
      0,
      {
        "before": true,
        "after": false
      }
    ], // require or disallow spacing around the * in yield* expressions
    "callback-return": 2, // `2` is default, optionally set `[2, ["callback", "cb", "next"]]`
    "global-require": 0, // `2` is default
    "handle-callback-err": [
      2,
      "^(err|errors?)$"
    ], // `2` is default, optionally set `[2, "^(err|error)$"]`
    "no-mixed-requires": 2, // [2, false] is default
    "no-new-require": 2, // `2` is default
    "no-path-concat": 2, // `2` is default
    "no-process-exit": 2, // `2` is default
    "no-restricted-modules": 2, // no default, optionally set `[2, "fs", "os"]`
    "no-sync": 1, // `2` is default
    "quotes": ["error", "double"],
    "indent": ["warn", 2],
    "react/self-closing-comp": ["warn", {
      "component": true,
      "html": true
    }],
    "react/display-name": 0,
    "react/boolean-prop-naming": 0, // Enforces consistent naming for boolean props - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/boolean-prop-naming.md
    "react/button-has-type": 0, // Forbid "button" element without an explicit "type" attribute - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/button-has-type.md
    "react/default-props-match-prop-types": 0, // Prevent extraneous defaultProps on components - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/default-props-match-prop-types.md
    "react/destructuring-assignment": 0, // Rule enforces consistent usage of destructuring assignment in component - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/destructuring-assignment.md
    "react/display-name": 1, // Prevent missing displayName in a React component definition - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/display-name.md
    "react/forbid-component-props": 0, // Forbid certain props on Components - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/forbid-component-props.md
    "react/forbid-dom-props": 0, // Forbid certain props on DOM Nodes - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/forbid-dom-props.md
    "react/forbid-elements": 0, // Forbid certain elements - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/forbid-elements.md
    "react/forbid-foreign-prop-types": 0, // Forbid foreign propTypes - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/forbid-foreign-prop-types.md
    "react/forbid-prop-types": 0, // Forbid certain propTypes - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/forbid-prop-types.md
    "react/no-access-state-in-setstate": 0, // Prevent using this.state inside this.setState - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-access-state-in-setstate.md
    "react/no-array-index-key": 1, // Prevent using Array index in key props - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-array-index-key.md
    "react/no-children-prop": 0, // Prevent passing children as props - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-children-prop.md
    "react/no-danger": 1, // Prevent usage of dangerous JSX properties - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-danger.md
    "react/no-danger-with-children": 0, // Prevent problem with children and props.dangerouslySetInnerHTML - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-danger-with-children.md
    "react/no-deprecated": 1, // Prevent usage of deprecated methods, including component lifecycle methods - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-deprecated.md
    "react/no-did-mount-set-state": 1, // Prevent usage of setState in componentDidMount - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-did-mount-set-state.md
    "react/no-did-update-set-state": 1, // Prevent usage of setState in componentDidUpdate - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-did-update-set-state.md
    "react/no-direct-mutation-state": 2, // Prevent direct mutation of this.state - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-direct-mutation-state.md
    "react/no-find-dom-node": 0, // Prevent usage of findDOMNode - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-find-dom-node.md
    "react/no-is-mounted": 0, // Prevent usage of isMounted - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-is-mounted.md
    "react/no-multi-comp": 1, // Prevent multiple component definition per file - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-multi-comp.md
    "react/no-redundant-should-component-update": 2, // Prevent usage of shouldComponentUpdate when extending React.PureComponent - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-redundant-should-component-update.md
    "react/no-render-return-value": 0, // Prevent usage of the return value of React.render - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-render-return-value.md
    "react/no-set-state": 0, // Prevent usage of setState - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-set-state.md
    "react/no-string-refs": 0, // Prevent using string references in ref attribute. - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-string-refs.md
    "react/no-this-in-sfc": 2, // Prevent using this in stateless functional components - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-this-in-sfc.md
    "react/no-typos": 2, // Prevent common casing typos - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-typos.md
    "react/no-unescaped-entities": 0, // Prevent invalid characters from appearing in markup - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-unescaped-entities.md
    "react/no-unknown-property": 1, // Prevent usage of unknown DOM property (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-unknown-property.md
    "react/no-unsafe": 0, // Prevent usage of unsafe lifecycle methods - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-unsafe.md
    "react/no-unused-prop-types": 1, // Prevent definitions of unused prop types - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-unused-prop-types.md
    "react/no-unused-state": 1, // Prevent definitions of unused state properties - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-unused-state.md
    "react/no-will-update-set-state": 1, // Prevent usage of setState in componentWillUpdate - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/no-will-update-set-state.md
    "react/prefer-es6-class": 2, // Enforce ES5 or ES6 class for React Components - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/prefer-es6-class.md
    "react/prefer-read-only-props": 1, // Enforce that props are read-only - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/prefer-read-only-props.md
    "react/prefer-stateless-function": 0, // Enforce stateless React Components to be written as a pure function - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/prefer-stateless-function.md
    "react/prop-types": 1, // Prevent missing props validation in a React component definition - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/prop-types.md
    "react/react-in-jsx-scope": 0, // Prevent missing React when using JSX - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/react-in-jsx-scope.md
    "react/require-default-props": 0, // Enforce a defaultProps definition for every prop that is not a required prop - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/require-default-props.md
    "react/require-optimization": 0, // Enforce React components to have a shouldComponentUpdate method - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/require-optimization.md
    "react/require-render-return": 1, // Enforce ES5 or ES6 class for returning value in render function - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/require-render-return.md
    "react/self-closing-comp": 2, // Prevent extra closing tags for components without children (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/self-closing-comp.md
    "react/sort-comp": 0, // Enforce component methods order (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/sort-comp.md
    "react/sort-prop-types": 0, // Enforce propTypes declarations alphabetical sorting - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/sort-prop-types.md
    "react/state-in-constructor": 0, // Enforce the state initialization style to be either in a constructor or with a class property - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/state-in-constructor.md
    "react/static-property-placement": 0, // Enforces where React component static properties should be positioned. - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/static-property-placement.md
    "react/style-prop-object": 1, // Enforce style prop value being an object - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/style-prop-object.md
    "react/void-dom-elements-no-children": 0, // Prevent void DOM elements (e.g. &lt;img /&gt;, &lt;br /&gt;) from receiving children - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/void-dom-elements-no-children.md
    "react/jsx-boolean-value": 1, // Enforce boolean attributes notation in JSX (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-boolean-value.md
    "react/jsx-child-element-spacing": 1, // Enforce or disallow spaces inside of curly braces in JSX attributes and expressions. - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-child-element-spacing.md
    "react/jsx-closing-bracket-location": [
      1,
      {
        "nonEmpty": "after-props",
        "selfClosing": "after-props"
      }
    ], // Validate closing bracket location in JSX (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-closing-bracket-location.md
    "react/jsx-closing-tag-location": 0, // Validate closing tag location in JSX (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-closing-tag-location.md
    "react/jsx-curly-newline": [
      1,
      {
        "multiline": "consistent",
        "singleline": "forbid"
      }
    ], // Enforce or disallow newlines inside of curly braces in JSX attributes and expressions (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-curly-newline.md
    "react/jsx-curly-spacing": [
      2,
      "never",
      {
        "allowMultiline": true,
        "spacing": { "objectLiterals": "never" }
        // "spacing": { "objectLiterals": "always" }
      }
    ], // Enforce or disallow spaces inside of curly braces in JSX attributes and expressions (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-curly-spacing.md
    "react/jsx-equals-spacing": 1, // Enforce or disallow spaces around equal signs in JSX attributes (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-equals-spacing.md
    "react/jsx-filename-extension": 0, // Restrict file extensions that may contain JSX - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-filename-extension.md
    "react/jsx-first-prop-new-line": [
      0,
      "multiline"
    ], // Enforce position of the first prop in JSX (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-first-prop-new-line.md
    "react/jsx-handler-names": 0, // Enforce event handler naming conventions in JSX - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-handler-names.md
    "react/jsx-indent": [
      1,
      2,
      {
        "checkAttributes": false,
        "indentLogicalExpressions": false
      }
    ], // Validate JSX indentation (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-indent.md
    "react/jsx-indent-props": [
      2,
      2
    ], // Validate props indentation in JSX (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-indent-props.md
    "react/jsx-key": 2, // Validate JSX has key prop when in array or iterator - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-key.md
    "react/jsx-max-depth": [
      1,
      { "max": 20 }
    ], // Validate JSX maximum depth - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-max-depth.md
    "react/jsx-max-props-per-line": [
      1,
      {
        "maximum": 3
      }
    ], // Limit maximum of props on a single line in JSX (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-max-props-per-line.md
    "react/jsx-no-bind": 0, // Prevent usage of .bind() and arrow functions in JSX props - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-no-bind.md
    "react/jsx-no-comment-textnodes": 2, // Prevent comments from being inserted as text nodes - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-no-comment-textnodes.md
    "react/jsx-no-duplicate-props": 2, // Prevent duplicate props in JSX - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-no-duplicate-props.md
    "react/jsx-no-literals": 0, // Prevent usage of unwrapped JSX strings - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-no-literals.md
    "react/jsx-no-target-blank": 0, // Prevent usage of unsafe target='_blank' - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-no-target-blank.md
    "react/jsx-no-undef": 2, // Disallow undeclared variables in JSX - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-no-undef.md
    "react/jsx-one-expression-per-line": 0, // Limit to one expression per line in JSX - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-one-expression-per-line.md
    "react/jsx-curly-brace-presence": 1, // Enforce curly braces or disallow unnecessary curly braces in JSX - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-curly-brace-presence.md
    "react/jsx-fragments": 1, // Enforce shorthand or standard form for React fragments - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-fragments.md
    "react/jsx-pascal-case": 2, // Enforce PascalCase for user-defined JSX components - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-pascal-case.md
    "react/jsx-props-no-multi-spaces": 1, // Disallow multiple spaces between inline JSX props (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-props-no-multi-spaces.md
    "react/jsx-props-no-spreading": 0, // Disallow JSX props spreading - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-props-no-spreading.md
    "react/jsx-sort-default-props": 0, // Enforce default props alphabetical sorting - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-sort-default-props.md
    "react/jsx-sort-props": 0, // Enforce props alphabetical sorting (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-sort-props.md
    "react/jsx-space-before-closing": 0, // Validate spacing before closing bracket in JSX (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-space-before-closing.md
    "react/jsx-tag-spacing": [
      1,
      {
        "closingSlash": "never",
        "beforeSelfClosing": "always",
        "afterOpening": "never",
        "beforeClosing": "never"
      }
    ], // Validate whitespace in and around the JSX opening and closing brackets (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-tag-spacing.md
    "react/jsx-uses-react": 1, // Prevent React to be incorrectly marked as unused - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-uses-react.md
    "react/jsx-uses-vars": 1, // Prevent variables used in JSX to be incorrectly marked as unused - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-uses-vars.md
    "react/jsx-wrap-multilines": 0 // Prevent missing parentheses around multilines JSX (fixable) - https://github.com/yannickcr/eslint-plugin-react/blob/HEAD/docs/rules/jsx-wrap-multilines.md
  }
}
